name: PR Builds x64

on:
  push:
    branches:
        - "**"
    paths-ignore:
        - "**.md"

jobs:
  macOS:
    strategy:
      fail-fast: false
    name: "macOS Dolphin"
    runs-on: macos-10.15
    steps:
      - name: "Checkout"
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: 'Fetch Git Tags'
        if: success()
        run: |
          git fetch --prune --unshallow
          echo "GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "GIT_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
          echo "CURR_DATE=$(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: "Install 10.14 SDK"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          wget https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.14.sdk.tar.xz
          tar -xf MacOSX10.14.sdk.tar.xz
          rm MacOSX10.14.sdk.tar.xz
          sudo mv MacOSX10.14.sdk /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/

      - name: "Download and Install prerequisites"
        if: success()
        shell: bash
        run: |
          wget https://github.com/wxWidgets/wxWidgets/releases/download/v3.1.3/wxWidgets-3.1.3.tar.bz2
          tar -xf wxWidgets-3.1.3.tar.bz2
          rm wxWidgets-3.1.3.tar.bz2
          rm '/usr/local/bin/2to3' || true
          echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $GITHUB_ENV
          brew upgrade cmake
          brew install \
          ffmpeg@2.8 \
          libpng \
          libav \
          pkgconfig \
          libao \
          sound-touch \
          git \
          hidapi

      - name: "Cache wxWidgets 3.1.3"
        uses: actions/cache@v1
        env:
          cache-name: "wxWidgets-3.1.3-macOS"
        with:
          path: ./wxWidgets-3.1.3/build
          key: "wxWidgets-3.1.3-macOS-Catalina"

      - name: "Install wxWidgets 3.1.3"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          cd wxWidgets-3.1.3
          cd build
          ../configure
          make -j7
          sudo make install

      - name: "Clone Dolphin"
        shell: bash
        run: |
          git clone https://github.com/jlambert360/Ishiiruka

      - name: "Replace Files"
        if: success()
        working-directory: ${{ github.workspace }}
        run: |
          rm ${{ github.workspace }}/Ishiiruka/build-mac.sh
          cp -v -R -f ${{ github.workspace }}/Resources/build-mac.sh ${{ github.workspace }}/Ishiiruka
          cp -v -R -f ${{ github.workspace }}/Resources/MacFix/Externals ${{ github.workspace }}/Ishiiruka
          cp -v -R -f ${{ github.workspace }}/Resources/MacFix/Source ${{ github.workspace }}/Ishiiruka
          cp -v -R -f ${{ github.workspace }}/Resources/MacFix/CMakeLists.txt ${{ github.workspace }}/Ishiiruka

      - name: "Build Dolphin"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          export LIBRARY_PATH=$LIBRARY_PATH:/usr/local/lib
          chmod +x ./Ishiiruka/build-mac.sh && ./Ishiiruka/build-mac.sh
          mkdir artifact
          FILE_NAME=MacFix
          echo "FILE_NAME=$FILE_NAME" >> $GITHUB_ENV

      - name: "Install Rust"
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-apple-darwin
          default: true
          override: true

      - name: "Build Updater"
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          git clone https://github.com/jlambert360/FPM-Mac-Updater
          cd FPM-Mac-Updater
          cargo build --all --release && strip target/release/Updater
          cd "target/release/"
          mv "Updater" ${{ github.workspace }}/build/Binaries/Dolphin.app/Contents/Resources/

      - name: "Package"
        if: success()
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          cd  ./build/Binaries
          zip -r "${{ env.FILE_NAME }}.zip" Dolphin.app
          mv "${{ env.FILE_NAME }}.zip" ../../artifact/

      - name: "Publish"
        if: success()
        uses: actions/upload-artifact@v2-preview
        with:
          name: macOS
          path: "./artifact/"
